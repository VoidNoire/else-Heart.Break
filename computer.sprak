#################
### functions ###
#################
# returns the required thing for a function
array thingwiththefunction(string function)
	string bank = "FinanceComputer"
	string weather = "MeteorologyServer"
	string locktoggler = "Hotel_Lobby_ComputerCashier"
	string largerecorder = "PoliceOfficeInterior_LargeRecorder_LargeRecorder_1"
	string supercomputer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
	string ultracomputer = "Heart"
	string memorystore = "Hotel_Lobby_ComputerCashier"
	string thingwithchangebalance = bank
	string thingwithchartoint = supercomputer
	string thingwithcopytoclipboard = "Hotel_ServerBasement_Extractor_1"
	string thingwithgetallrooms = supercomputer
	string thingwithgetbalanceforperson = bank
	string thingwithgetnumericdata = ultracomputer
	string thingwithgetposition = supercomputer
	string thingwithgetrain = weather
	string thingwithgetroom = supercomputer
	string thingwithgetthingsoftype = supercomputer
	string thingwithgetthingsinroom = supercomputer
	string thingwithgettypeofthing = supercomputer
	string thingwithinteractwith = supercomputer
	string thingwithinttochar = supercomputer
	string thingwithloadmemory = memorystore
	string thingwithlock = locktoggler
	string thingwithmoveperson = largerecorder
	string thingwithregisterseller = "Wellspringer"
	string thingwithsavememory = memorystore
	string thingwithsetnumericdata = ultracomputer
	string thingwithsetposition = supercomputer
	string thingwithsetweather = weather
	string thingwithsleep = largerecorder
	string thingwithstringcontains = largerecorder
	string thingwithunlock = locktoggler
	string thingwithzapperson = largerecorder
	string thingwithzappersongently = ultracomputer
	
	if function == "ChangeBalance"
		return thingwithchangebalance
	end
	if function == "CharToInt"
		return thingwithchartoint
	end
	if function == "CopyToClipboard"
		return thingwithcopytoclipboard
	end
	if function == "GetAllRooms"
		return thingwithgetallrooms
	end
	if function == "GetBalanceForPerson"
		return thingwithgetbalanceforperson
	end
	if function == "GetNumericData"
		return thingwithgetnumericdata
	end
	if function == "GetPosition"
		return thingwithgetposition
	end
	if function == "GetRain"
		return thingwithgetrain
	end
	if function == "GetRoom"
		return thingwithgetroom
	end
	if function == "GetThingsInRoom"
		return thingwithgetthingsinroom
	end
	if function == "GetThingsOfType"
		return thingwithgetthingsoftype
	end
	if function == "GetTypeOfThing"
		return thingwithgettypeofthing
	end
	if function == "InteractWith"
		return thingwithinteractwith
	end
	if function == "IntToChar"
		return thingwithinttochar
	end
	if function == "LoadMemory"
		return thingwithloadmemory
	end
	if function == "Lock"
		return thingwithlock
	end
	if function == "MovePerson"
		return thingwithmoveperson
	end
	if function == "RegisterSeller"
		return thingwithregisterseller
	end
	if function == "SaveMemory"
		return thingwithsavememory
	end
	if function == "SetNumericData"
		return thingwithsetnumericdata
	end
	if function == "SetPosition"
		return thingwithsetposition
	end
	if function == "SetRain"
		return thingwithsetweather
	end
	if function == "Sleep"
		return thingwithsleep
	end
	if function == "StringContains"
		return thingwithstringcontains
	end
	if function == "Unlock"
		return thingwithunlock
	end
	if function == "ZapPerson"
		return thingwithzapperson
	end
	if function == "ZapPersonGently"
		return thingwithzappersongently
	end
end

# returns true if thing has a certain function
bool hasfunction(string thing, string function)
	return Connect(thing).HasFunction(function)
end

# delayby
void delayby(number delayduration)
	Connect(thingwiththefunction("Sleep")).Sleep(delayduration)
end

# copy to clipboard
void copy(value)
	Connect(thingwiththefunction("CopyToClipboard")).CopyToClipboard(value)
end

### mathematics ###
# returns the answer of base raised to the power of exponent
number power(number base, number exponent)
	number answer = 1
	loop from 0 to exponent - 1
		answer *= base
	end
	return answer
end

### data manipulation ###
# returns true if a character is uppercase
bool isuppercase(var character)
	string connect = Connect(thingwiththefunction("CharToInt"))
	return connect.CharToInt(character) >= -32 && connect.CharToInt(character) <= -7
end

# coverts uppercase characters to lowercase characters
string uppercasetolowercase(var text)
	string lowered = ""
	loop character in text
		if isuppercase(character)
			lowered += Connect(thingwiththefunction("IntToChar")).IntToChar(Connect(thingwiththefunction("CharToInt")).CharToInt(character) + 32)
		else
			lowered += character
		end
	end
	return lowered
end

# converts the first character of a string to a number
number charactertonumber(string character)
	return Connect(thingwiththefunction("CharToInt")).CharToInt(character)
end

# slices a string
string slice(string inputstring, number index, string lastcharacter)
	string outputslice = ""
	loop
		if inputstring[index] == lastcharacter
			break
		else
			outputslice += inputstring[index]
		end
		index++
	end
	return outputslice
end

# converts a string to a number
number stringtonumber(string inputstring)
	number outputnumber = 0
	number currentnumber = 0
	bool isnegative = false
	number stringlength = Count(inputstring) - 1
	loop character in inputstring
		if character == "-"
			isnegative = true
		else
			currentnumber = charactertonumber(character) + 49
			if stringlength != 0
				currentnumber *= power(10, stringlength)
			end
			outputnumber += currentnumber
		end
		stringlength--
	end
	if isnegative
		outputnumber *= -1
	end
	return outputnumber
end

# converts an array to a string
string arraytostring(array list)
	string stringified = ""
	loop element in list
		stringified += element
	end
	return stringified
end

# returns true if a string is present in a string
bool stringhas(string whole, string section)
	return Connect(thingwiththefunction("StringContains")).StringContains(whole, section)
end

# saves a piece of data to memorystore variable set in thingwiththefunction() using key
void save(var key, var data)
	return Connect(thingwiththefunction("SaveMemory")).SaveMemory(key, data)
end

# loads a piece of data to memorystore variable set in thingwiththefunction() using key
void load(var key)
	return Connect(thingwiththefunction("LoadMemory")).LoadMemory(key)
end

### things ###
# returns the category of a string
string categoryof(string thing)
	return Connect(thingwiththefunction("GetTypeOfThing")).GetTypeOfThing(thing)
end

# returns true if a string is a person
bool stringisaperson(string person)
	return categoryof(person) == "character"
end

# returns an array of things of certain category
array anarrayofthingsincategory(string category)
	return Connect(thingwiththefunction("GetThingsOfType")).GetThingsOfType(category)
end

# returns a string of things of certain category, delimited by delimiter
string astringofthingsincategory(string category, string delimiter)
	string listofthings = ""
	loop anarrayofthingsincategory(category)
		listofthings += @ + delimiter
	end
	return listofthings
end

# returns a string of a position of a thing in standard format
string standardpositionof(string thing)
	return Connect(thingwiththefunction("GetPosition")).GetPosition(thing)
end

# returns an array of a position of a thing
array arrayofpositionof(string inputstring)
	string position = standardpositionof(inputstring)
	string room = roomof(inputstring)
	number roomnamelength = Count(room)
	string x = slice(position, 21 + roomnamelength, ",")
	string y = slice(position, 22 + roomnamelength + Count(x), ")")
	return [room, stringtonumber(x), stringtonumber(y)]
end

# returns a string of a position of thing, delimited by delimiter
string stringofpositionof(string inputstring, string delimiter)
	string position = standardpositionof(inputstring)
	string room = roomof(inputstring)
	number roomnamelength = Count(room)
	string x = slice(position, 21 + roomnamelength, ",")
	string y = slice(position, 22 + roomnamelength + Count(x), ")")
	return room + delimiter + stringtonumber(x) + delimiter + stringtonumber(y)
end

# returns the x coordinate of a thing
number xof(string inputstring)
	return stringtonumber(slice(standardpositionof(inputstring), 21 + Count(roomof(inputstring)), ","))
end

# returns the y coordinate of a thing
number yof(string inputstring)
	string position = standardpositionof(inputstring)
	number roomnamelength = Count(roomof(inputstring))
	return stringtonumber(slice(position, 22 + roomnamelength + Count(slice(position, 21 + roomnamelength, ",")), ")"))
end

# returns an array of everything in the world
array anarrayofeverything()
	array list = []
	loop room in anarrayofallrooms()
		loop anarrayofthingsin(room)
			Append(list, @)
		end
	end
	return list
end

# returns a string of everything in the world, delimited by delimiter
string astringofeverything(string delimiter)
	string list = ""
	loop room in anarrayofallrooms()
		loop anarrayofthingsin(room)
			list += @ + delimiter
		end
	end
	return list
end

# returns a string of everything in the world and their positions, delimited by delimiter
string astringofeverythingandtheirpositions(string delimiter)
	string list = ""
	loop room in anarrayofallrooms()
		loop anarrayofthingsin(room)
			list += @ + delimiter + roomof(@) + delimiter + xof(@) + delimiter + yof(@) + ". "
		end
	end
	return list
end

# returns an array of things with names containing the search string
array arraysearchforthing(string searchstring)
	array list = []
	loop anarrayofallrooms()
		loop thing in anarrayofthingsin(@)
			if stringhas(uppercasetolowercase(thing), uppercasetolowercase(searchstring))
				Append(list, thing)
			end
		end
	end
	return list
end

# returns a string of things with names containing the search string, delimited by delimiter
string stringsearchforthing(string searchstring, string delimiter)
	string list = ""
	loop anarrayofallrooms()
		loop thing in anarrayofthingsin(@)
			if stringhas(uppercasetolowercase(thing), uppercasetolowercase(searchstring))
				list += thing + delimiter
			end
		end
	end
	return list
end

# locks doors
void lock(string door)
	Connect(thingwiththefunction("Lock")).Lock(door)
end

# unlocks doors
void unlock(string door)
	Connect(thingwiththefunction("Unlock")).Unlock(door)
end

# returns a data value of a thing
void thedataof(string thing, string stat)
	return Connect(thingwiththefunction("GetNumericData")).GetNumericData(thing, stat)
end

# returns a person's sleepiness
number thesleepinessof(string person)
	return thedataof(person, "sleepiness")
end

# returns a person's walkspeed
number thewalkspeedof(string person)
	return thedataof(person, "walkSpeed")
end

# returns a person's corruption
number thecorruptionof(string person)
	return thedataof(person, "corruption")
end

# returns a person's drunkenness
number thedrunkennessof(string person)
	return thedataof(person, "drunkenness")
end

# returns a person's smelliness
number thesmellinessof(string person)
	return thedataof(person, "smelliness")
end

# returns a person's charisma
number thecharismaof(string person)
	return thedataof(person, "charisma")
end

# returns a person's happiness
number thehappinessof(string person)
	return thedataof(person, "happiness")
end

# returns a person's supremacy
number thesupremacyof(string person)
	return thedataof(person, "supremacy")
end

# set a person's stat
void setthedataof(string thing, string stat, var value)
	Connect(thingwiththefunction("SetNumericData")).SetNumericData(thing, stat, value)
end

# set a person's sleepiness
void setthesleepinessof(string person, number value)
	setthedataof(person, "sleepiness", value)
end

# set a person's sleepiness
void setthewalkspeedof(string person, number value)
	setthedataof(person, "walkSpeed", value)
end

# set a person's corruption
void setthecorruptionof(string person, number value)
	setthedataof(person, "sleepiness", value)
end

# set a person's drunkenness
void setthedrunkennessof(string person, number value)
	setthedataof(person, "drunkenness", value)
end

# set a person's smelliness
void setthesmellinessof(string person, number value)
	setthedataof(person, "smelliness", value)
end

# set a person's charisma
void setthecharismaof(string person, number value)
	setthedataof(person, "charisma", value)
end

# set a person's happiness
void setthehappinessof(string person, number value)
	setthedataof(person, "happiness", value)
end

# set a person's supremacy
void setthesupremacyof(string person, number value)
	setthedataof(person, "supremacy", value)
end

# zaps a person (makes person sleep)
void zap(string person)
	moveitemtothing(thingwiththefunction("ZapPerson"), person)
	Connect(thingwiththefunction("ZapPerson").ZapPerson(person))
end

# gently zaps a person (stuns person)
void gentlyzap(string person)
	Connect(thingwiththefunction("ZapPersonGently")).ZapPersonGently(person)
end

# zaps people in an array
void zapallinarray(array zaptargets, number zapduration, number delayduration)
	if Count(zaptargets) != 0
		loop from 0 to zapduration
			loop zaptargets
				zap(@)
			end
			delayby(delayduration)
		end
	end	
end

# gently zaps people in an array
void gentlyzapallinarray(array gentlyzaptargets, number zapduration, number delayduration)
	if Count(gentlyzaptargets) != 0
		loop from 0 to zapduration
			loop gentlyzaptargets
				gentlyzap(@)
			end
			delayby(delayduration)
		end
	end
end

# zaps other people in the room the user is in
void zapothersinroom(number zapduration, number delayduration)
	array list = anarrayofpeoplenear(GetUser())
	if Count(list) != 0
		loop from 0 to zapduration
			loop list
				zap(@)
			end
			delayby(delayduration)
		end
	end	
end

# gently zaps other people in the room the user is in
void gentlyzapothersinroom(number zapduration, number delayduration)
	array list = anarrayofpeoplenear(GetUser())
	if Count(list) != 0
		loop from 0 to zapduration
			loop list
				gentlyzap(@)
			end
			delayby(delayduration)
		end
	end	
end

# cause a person to interact with a thing
void interact(string person, string thing)
	Connect(thingwiththefunction("InteractWith")).InteractWith(person, thing)
end

### cash ###
# return a person's balance
number thebalanceof(string person)
	return Connect(thingwiththefunction("GetBalanceForPerson")).GetBalanceForPerson(person)
end

# changes person's balance by a value
void changethebalanceof(string person, number cash)
	Connect(thingwiththefunction("ChangeBalance")).ChangeBalance(person, cash)
end

# returns the difference between a number and a person's balance 
number thebalancedifferencebetween(string person, number value)
	return value - thebalanceof(person)
end

# sets how much cash a person has
void setcash(string person, number cash)
	changethebalanceof(person, thebalancedifferencebetween(person, cash))
end

# registers cash to Wellspringer server under a person's name 
void register(string person, number cash)
	Connect(thingwiththefunction("RegisterSeller")).RegisterSeller(person, cash)
end

### environment ###
# returns the weather value
number theweathervalue()
	Connect(thingwiththefunction("GetRain")).GetRain()
end

# sets the weather value
void settheweathervalue(number value)
	if theweathervalue() != value
		Connect(thingwiththefunction("SetRain")).SetRain(value)
	end
end

# sets actual weather
void setweather(number choice)
	if choice == 1
		if theweathervalue() >= 25
			settheweathervalue(0)
		end
	end
	if choice == 2
		if theweathervalue() >= 100 || theweathervalue() <=24 
			settheweathervalue(25)
		end
	end
	if choice == 3
		if theweathervalue() >= 200 || theweathervalue() <= 99
			settheweathervalue(100)
		end
	end
	if choice == 4
		if theweathervalue() <= 199
			settheweathervalue(200)
		end
	end
end

### rooms ###
# return string containing current room of person
string roomof(string person)
	return Connect(thingwiththefunction("GetRoom")).GetRoom(person)
end

# returns an array of all rooms
array anarrayofallrooms()
	return Connect(thingwiththefunction("GetAllRooms")).GetAllRooms()
end

# returns true if a string is a room
bool isroom(string room)
	if roomof(room) == "" && Count(anarrayofthingsin(room)) != 0
	end
end

# returns an array of rooms with names containing the search string
array arraysearchforroom(string searchstring)
	array list = []
	loop room in anarrayofallrooms()
		if stringhas(uppercasetolowercase(room), uppercasetolowercase(searchstring))
			Append(list, room)
		end
	end
	return list
end

# returns a string of rooms with names containing the search string, delimited by delimiter
string stringsearchforroom(string searchstring, string delimiter)
	string list = ""
	loop room in anarrayofallrooms()
		if stringhas(uppercasetolowercase(room), uppercasetolowercase(searchstring))
			list += room + delimiter
		end
	end
	return list
end

# returns an array of all items in a room
array anarrayofthingsin(string room)
	return Connect(thingwiththefunction("GetThingsInRoom")).GetThingsInRoom(room)
end

# returns an array of all people in a room
array anarrayofpeoplein(string room)
	array list = []
	loop anarrayofthingsin(room)
		if stringisaperson(@)
			Append(list, @)
		end
	end
	return list
end

# returns an array of all the people in a room that a person is in, except for that person
array anarrayofpeoplenear(string person)
	array list = []
	loop anarrayofpeoplein(roomof(person))
		if stringisaperson(@) && @ != person
			Append(list, @)
		end
	end
	return list
end

### teleport ###
# move item to thing
void moveitemtothing(string item, string thing)
	Connect(thingwiththefunction("SetPosition")).SetPosition(item, thing)
end

# move person to thing
void movepersontothing(string person, string thing)
	moveitemtothing(thingwiththefunction("MovePerson"), person)
	Connect(thingwiththefunction("MovePerson")).MovePerson(person, thing)
end

# move item to room
void moveitemtoroom(string item, string room, number index)
	array thingsinroom = anarrayofthingsin(room)
	moveitemtothing(item, thingsinroom[index])
end

# move person to room
void movepersontoroom(string person, string room, number index)
	array thingsinroom = anarrayofthingsin(room)
	movepersontothing(person, thingsinroom[index])
end
